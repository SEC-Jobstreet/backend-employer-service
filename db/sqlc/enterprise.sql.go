// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: enterprise.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createEnterprise = `-- name: CreateEnterprise :one
INSERT INTO enterprise (
    id,
    name,
    country, 
    address,
    latitude,
    longitude,
    field,
    size,
    url,
    license,
    employer_id,
    employer_role
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12
) RETURNING id, name, country, address, latitude, longitude, field, size, url, license, employer_id, employer_role, "CreatedAt"
`

type CreateEnterpriseParams struct {
	ID           uuid.UUID   `json:"id"`
	Name         pgtype.Text `json:"name"`
	Country      pgtype.Text `json:"country"`
	Address      pgtype.Text `json:"address"`
	Latitude     pgtype.Text `json:"latitude"`
	Longitude    pgtype.Text `json:"longitude"`
	Field        pgtype.Text `json:"field"`
	Size         pgtype.Text `json:"size"`
	Url          pgtype.Text `json:"url"`
	License      pgtype.Text `json:"license"`
	EmployerID   pgtype.Text `json:"employer_id"`
	EmployerRole pgtype.Text `json:"employer_role"`
}

func (q *Queries) CreateEnterprise(ctx context.Context, arg CreateEnterpriseParams) (Enterprise, error) {
	row := q.db.QueryRow(ctx, createEnterprise,
		arg.ID,
		arg.Name,
		arg.Country,
		arg.Address,
		arg.Latitude,
		arg.Longitude,
		arg.Field,
		arg.Size,
		arg.Url,
		arg.License,
		arg.EmployerID,
		arg.EmployerRole,
	)
	var i Enterprise
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Country,
		&i.Address,
		&i.Latitude,
		&i.Longitude,
		&i.Field,
		&i.Size,
		&i.Url,
		&i.License,
		&i.EmployerID,
		&i.EmployerRole,
		&i.CreatedAt,
	)
	return i, err
}

const getEnterpriseByEmployerId = `-- name: GetEnterpriseByEmployerId :many
SELECT id, name, country, address, latitude, longitude, field, size, url, license, employer_id, employer_role, "CreatedAt" FROM enterprise
WHERE employer_id = $1
`

func (q *Queries) GetEnterpriseByEmployerId(ctx context.Context, employerID pgtype.Text) ([]Enterprise, error) {
	rows, err := q.db.Query(ctx, getEnterpriseByEmployerId, employerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Enterprise{}
	for rows.Next() {
		var i Enterprise
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Country,
			&i.Address,
			&i.Latitude,
			&i.Longitude,
			&i.Field,
			&i.Size,
			&i.Url,
			&i.License,
			&i.EmployerID,
			&i.EmployerRole,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEnterpriseById = `-- name: GetEnterpriseById :one
SELECT id, name, country, address, latitude, longitude, field, size, url, license, employer_id, employer_role, "CreatedAt" FROM enterprise
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetEnterpriseById(ctx context.Context, id uuid.UUID) (Enterprise, error) {
	row := q.db.QueryRow(ctx, getEnterpriseById, id)
	var i Enterprise
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Country,
		&i.Address,
		&i.Latitude,
		&i.Longitude,
		&i.Field,
		&i.Size,
		&i.Url,
		&i.License,
		&i.EmployerID,
		&i.EmployerRole,
		&i.CreatedAt,
	)
	return i, err
}

const updateEnterprise = `-- name: UpdateEnterprise :one
UPDATE enterprise
SET
  name = COALESCE($1, name),
  country = COALESCE($2, country),
  address = COALESCE($3, address),
  field = COALESCE($4, field),
  latitude = COALESCE($5, latitude),
  longitude = COALESCE($6, longitude),
  size = COALESCE($7, size),
  url = COALESCE($8, url),
  license = COALESCE($9, license),
  employer_role = COALESCE($10, employer_role)
WHERE
  id = $11 and employer_id = $12
RETURNING id, name, country, address, latitude, longitude, field, size, url, license, employer_id, employer_role, "CreatedAt"
`

type UpdateEnterpriseParams struct {
	Name         pgtype.Text `json:"name"`
	Country      pgtype.Text `json:"country"`
	Address      pgtype.Text `json:"address"`
	Field        pgtype.Text `json:"field"`
	Latitude     pgtype.Text `json:"latitude"`
	Longitude    pgtype.Text `json:"longitude"`
	Size         pgtype.Text `json:"size"`
	Url          pgtype.Text `json:"url"`
	License      pgtype.Text `json:"license"`
	EmployerRole pgtype.Text `json:"employer_role"`
	ID           uuid.UUID   `json:"id"`
	EmployerID   pgtype.Text `json:"employer_id"`
}

func (q *Queries) UpdateEnterprise(ctx context.Context, arg UpdateEnterpriseParams) (Enterprise, error) {
	row := q.db.QueryRow(ctx, updateEnterprise,
		arg.Name,
		arg.Country,
		arg.Address,
		arg.Field,
		arg.Latitude,
		arg.Longitude,
		arg.Size,
		arg.Url,
		arg.License,
		arg.EmployerRole,
		arg.ID,
		arg.EmployerID,
	)
	var i Enterprise
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Country,
		&i.Address,
		&i.Latitude,
		&i.Longitude,
		&i.Field,
		&i.Size,
		&i.Url,
		&i.License,
		&i.EmployerID,
		&i.EmployerRole,
		&i.CreatedAt,
	)
	return i, err
}
