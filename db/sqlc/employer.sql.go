// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: employer.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEmployerProfile = `-- name: CreateEmployerProfile :one

INSERT INTO employer_profile (
  enterprise_id,
  email,
  first_name,
  last_name,
  phone,
  address
)
VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, enterprise_id, email, first_name, last_name, phone, address, updated_at, created_at
`

type CreateEmployerProfileParams struct {
	EnterpriseID int64       `json:"enterprise_id"`
	Email        string      `json:"email"`
	FirstName    string      `json:"first_name"`
	LastName     string      `json:"last_name"`
	Phone        pgtype.Text `json:"phone"`
	Address      pgtype.Text `json:"address"`
}

// Optional pagination
func (q *Queries) CreateEmployerProfile(ctx context.Context, arg CreateEmployerProfileParams) (EmployerProfile, error) {
	row := q.db.QueryRow(ctx, createEmployerProfile,
		arg.EnterpriseID,
		arg.Email,
		arg.FirstName,
		arg.LastName,
		arg.Phone,
		arg.Address,
	)
	var i EmployerProfile
	err := row.Scan(
		&i.ID,
		&i.EnterpriseID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Phone,
		&i.Address,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getEmployerOne = `-- name: GetEmployerOne :one
SELECT id, enterprise_id, email, first_name, last_name, phone, address, updated_at, created_at FROM employer_profile
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetEmployerOne(ctx context.Context, id int64) (EmployerProfile, error) {
	row := q.db.QueryRow(ctx, getEmployerOne, id)
	var i EmployerProfile
	err := row.Scan(
		&i.ID,
		&i.EnterpriseID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Phone,
		&i.Address,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getEmployerProfileByEnterpriseID = `-- name: GetEmployerProfileByEnterpriseID :one
SELECT id, enterprise_id, email, first_name, last_name, phone, address, updated_at, created_at FROM employer_profile
WHERE enterprise_id = $1
LIMIT 1
`

func (q *Queries) GetEmployerProfileByEnterpriseID(ctx context.Context, enterpriseID int64) (EmployerProfile, error) {
	row := q.db.QueryRow(ctx, getEmployerProfileByEnterpriseID, enterpriseID)
	var i EmployerProfile
	err := row.Scan(
		&i.ID,
		&i.EnterpriseID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Phone,
		&i.Address,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const listEmployerProfiles = `-- name: ListEmployerProfiles :many
SELECT id, enterprise_id, email, first_name, last_name, phone, address, updated_at, created_at FROM employer_profile
ORDER BY id
LIMIT $1 OFFSET $2
`

type ListEmployerProfilesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListEmployerProfiles(ctx context.Context, arg ListEmployerProfilesParams) ([]EmployerProfile, error) {
	rows, err := q.db.Query(ctx, listEmployerProfiles, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EmployerProfile{}
	for rows.Next() {
		var i EmployerProfile
		if err := rows.Scan(
			&i.ID,
			&i.EnterpriseID,
			&i.Email,
			&i.FirstName,
			&i.LastName,
			&i.Phone,
			&i.Address,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEmployerProfile = `-- name: UpdateEmployerProfile :one
UPDATE employer_profile
SET
  enterprise_id = $1,
  email = $2,
  first_name = $3,
  last_name = $4,
  phone = $5,
  address = $6,
  updated_at = CURRENT_TIMESTAMP
WHERE
  id = $7
RETURNING id, enterprise_id, email, first_name, last_name, phone, address, updated_at, created_at
`

type UpdateEmployerProfileParams struct {
	EnterpriseID int64       `json:"enterprise_id"`
	Email        string      `json:"email"`
	FirstName    string      `json:"first_name"`
	LastName     string      `json:"last_name"`
	Phone        pgtype.Text `json:"phone"`
	Address      pgtype.Text `json:"address"`
	ID           int64       `json:"id"`
}

func (q *Queries) UpdateEmployerProfile(ctx context.Context, arg UpdateEmployerProfileParams) (EmployerProfile, error) {
	row := q.db.QueryRow(ctx, updateEmployerProfile,
		arg.EnterpriseID,
		arg.Email,
		arg.FirstName,
		arg.LastName,
		arg.Phone,
		arg.Address,
		arg.ID,
	)
	var i EmployerProfile
	err := row.Scan(
		&i.ID,
		&i.EnterpriseID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Phone,
		&i.Address,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}
