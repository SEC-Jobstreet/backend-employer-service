// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: employer.sql

package db

import (
	"context"
)

const associateEmployerWithEnterprise = `-- name: AssociateEmployerWithEnterprise :exec
INSERT INTO employer_enterprise (
    employer_id,
    enterprise_id
) VALUES (
    $1, $2
)
`

type AssociateEmployerWithEnterpriseParams struct {
	EmployerID   int64 `json:"employer_id"`
	EnterpriseID int64 `json:"enterprise_id"`
}

func (q *Queries) AssociateEmployerWithEnterprise(ctx context.Context, arg AssociateEmployerWithEnterpriseParams) error {
	_, err := q.db.Exec(ctx, associateEmployerWithEnterprise, arg.EmployerID, arg.EnterpriseID)
	return err
}

const createEmployerProfile = `-- name: CreateEmployerProfile :one

INSERT INTO employer_profile (
  email,
  first_name,
  last_name,
  phone,
  address
)
VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, email, first_name, last_name, phone, address, email_confirmed, updated_at, created_at
`

type CreateEmployerProfileParams struct {
	Email     string `json:"email"`
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	Phone     string `json:"phone"`
	Address   string `json:"address"`
}

// Optional pagination
func (q *Queries) CreateEmployerProfile(ctx context.Context, arg CreateEmployerProfileParams) (EmployerProfile, error) {
	row := q.db.QueryRow(ctx, createEmployerProfile,
		arg.Email,
		arg.FirstName,
		arg.LastName,
		arg.Phone,
		arg.Address,
	)
	var i EmployerProfile
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Phone,
		&i.Address,
		&i.EmailConfirmed,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getEmployerOne = `-- name: GetEmployerOne :one
SELECT id, email, first_name, last_name, phone, address, email_confirmed, updated_at, created_at FROM employer_profile
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetEmployerOne(ctx context.Context, id int64) (EmployerProfile, error) {
	row := q.db.QueryRow(ctx, getEmployerOne, id)
	var i EmployerProfile
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Phone,
		&i.Address,
		&i.EmailConfirmed,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getEmployerProfileByEnterpriseID = `-- name: GetEmployerProfileByEnterpriseID :one
SELECT employer_profile.id, employer_profile.email, employer_profile.first_name, employer_profile.last_name, employer_profile.phone, employer_profile.address, employer_profile.email_confirmed, employer_profile.updated_at, employer_profile.created_at 
FROM employer_profile
JOIN employer_enterprise ON employer_profile.id = employer_enterprise.employer_id
WHERE employer_enterprise.enterprise_id = $1
`

func (q *Queries) GetEmployerProfileByEnterpriseID(ctx context.Context, enterpriseID int64) (EmployerProfile, error) {
	row := q.db.QueryRow(ctx, getEmployerProfileByEnterpriseID, enterpriseID)
	var i EmployerProfile
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Phone,
		&i.Address,
		&i.EmailConfirmed,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const listEmployerProfiles = `-- name: ListEmployerProfiles :many
SELECT id, email, first_name, last_name, phone, address, email_confirmed, updated_at, created_at FROM employer_profile
ORDER BY id
LIMIT $1 OFFSET $2
`

type ListEmployerProfilesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListEmployerProfiles(ctx context.Context, arg ListEmployerProfilesParams) ([]EmployerProfile, error) {
	rows, err := q.db.Query(ctx, listEmployerProfiles, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EmployerProfile{}
	for rows.Next() {
		var i EmployerProfile
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.FirstName,
			&i.LastName,
			&i.Phone,
			&i.Address,
			&i.EmailConfirmed,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEmailConfirmed = `-- name: UpdateEmailConfirmed :exec
UPDATE employer_profile
SET email_confirmed = true
WHERE email = $1
RETURNING employer_profile.email
`

func (q *Queries) UpdateEmailConfirmed(ctx context.Context, email string) error {
	_, err := q.db.Exec(ctx, updateEmailConfirmed, email)
	return err
}

const updateEmployerProfile = `-- name: UpdateEmployerProfile :one
UPDATE employer_profile
SET
  email = $1,
  first_name = $2,
  last_name = $3,
  phone = $4,
  address = $5,
  updated_at = CURRENT_TIMESTAMP
WHERE
  id = $6
RETURNING id, email, first_name, last_name, phone, address, email_confirmed, updated_at, created_at
`

type UpdateEmployerProfileParams struct {
	Email     string `json:"email"`
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	Phone     string `json:"phone"`
	Address   string `json:"address"`
	ID        int64  `json:"id"`
}

func (q *Queries) UpdateEmployerProfile(ctx context.Context, arg UpdateEmployerProfileParams) (EmployerProfile, error) {
	row := q.db.QueryRow(ctx, updateEmployerProfile,
		arg.Email,
		arg.FirstName,
		arg.LastName,
		arg.Phone,
		arg.Address,
		arg.ID,
	)
	var i EmployerProfile
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Phone,
		&i.Address,
		&i.EmailConfirmed,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}
