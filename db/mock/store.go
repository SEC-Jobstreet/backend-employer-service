// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/SEC-Jobstreet/backend-employer-service/db/sqlc (interfaces: Querier)
//
// Generated by this command:
//
//	mockgen -package mockdb -destination db/mock/store.go github.com/SEC-Jobstreet/backend-employer-service/db/sqlc Querier
//

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	db "github.com/SEC-Jobstreet/backend-employer-service/db/sqlc"
	uuid "github.com/google/uuid"
	pgtype "github.com/jackc/pgx/v5/pgtype"
	gomock "go.uber.org/mock/gomock"
)

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// CreateEnterprise mocks base method.
func (m *MockQuerier) CreateEnterprise(arg0 context.Context, arg1 db.CreateEnterpriseParams) (db.Enterprise, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEnterprise", arg0, arg1)
	ret0, _ := ret[0].(db.Enterprise)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEnterprise indicates an expected call of CreateEnterprise.
func (mr *MockQuerierMockRecorder) CreateEnterprise(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnterprise", reflect.TypeOf((*MockQuerier)(nil).CreateEnterprise), arg0, arg1)
}

// GetEnterpriseByEmployerId mocks base method.
func (m *MockQuerier) GetEnterpriseByEmployerId(arg0 context.Context, arg1 pgtype.Text) ([]db.Enterprise, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnterpriseByEmployerId", arg0, arg1)
	ret0, _ := ret[0].([]db.Enterprise)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnterpriseByEmployerId indicates an expected call of GetEnterpriseByEmployerId.
func (mr *MockQuerierMockRecorder) GetEnterpriseByEmployerId(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnterpriseByEmployerId", reflect.TypeOf((*MockQuerier)(nil).GetEnterpriseByEmployerId), arg0, arg1)
}

// GetEnterpriseById mocks base method.
func (m *MockQuerier) GetEnterpriseById(arg0 context.Context, arg1 uuid.UUID) (db.Enterprise, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnterpriseById", arg0, arg1)
	ret0, _ := ret[0].(db.Enterprise)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnterpriseById indicates an expected call of GetEnterpriseById.
func (mr *MockQuerierMockRecorder) GetEnterpriseById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnterpriseById", reflect.TypeOf((*MockQuerier)(nil).GetEnterpriseById), arg0, arg1)
}

// UpdateEnterprise mocks base method.
func (m *MockQuerier) UpdateEnterprise(arg0 context.Context, arg1 db.UpdateEnterpriseParams) (db.Enterprise, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEnterprise", arg0, arg1)
	ret0, _ := ret[0].(db.Enterprise)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEnterprise indicates an expected call of UpdateEnterprise.
func (mr *MockQuerierMockRecorder) UpdateEnterprise(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnterprise", reflect.TypeOf((*MockQuerier)(nil).UpdateEnterprise), arg0, arg1)
}
